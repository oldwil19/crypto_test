services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./migrations:/app/migrations
    env_file:
      - .env

  db:
    image: postgres:15-alpine
    container_name: postgres
    platform: linux/amd64
    networks:
      - app-network
    environment:
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: securepassword
      POSTGRES_DB: cryptodb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  nginx:
    image: nginx:alpine
    container_name: cryptoproject-nginx
    platform: linux/amd64
    ports:
      - "80:80"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
